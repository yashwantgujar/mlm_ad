"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.LoggedOut = exports.LoggedIn = void 0;

var _test = require("@storybook/test");

var _Page = require("./Page");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var _default = {
  title: 'Example/Page',
  component: _Page.Page,
  parameters: {
    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout
    layout: 'fullscreen'
  }
};
exports["default"] = _default;
var LoggedOut = {}; // More on interaction testing: https://storybook.js.org/docs/writing-tests/interaction-testing

exports.LoggedOut = LoggedOut;
var LoggedIn = {
  play: function () {
    var _play = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
      var canvasElement, canvas, loginButton, logoutButton;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              canvasElement = _ref.canvasElement;
              canvas = (0, _test.within)(canvasElement);
              loginButton = canvas.getByRole('button', {
                name: /Log in/i
              });
              _context.next = 5;
              return (0, _test.expect)(loginButton).toBeInTheDocument();

            case 5:
              _context.next = 7;
              return _test.userEvent.click(loginButton);

            case 7:
              _context.next = 9;
              return (0, _test.expect)(loginButton).not.toBeInTheDocument();

            case 9:
              logoutButton = canvas.getByRole('button', {
                name: /Log out/i
              });
              _context.next = 12;
              return (0, _test.expect)(logoutButton).toBeInTheDocument();

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function play(_x) {
      return _play.apply(this, arguments);
    }

    return play;
  }()
};
exports.LoggedIn = LoggedIn;